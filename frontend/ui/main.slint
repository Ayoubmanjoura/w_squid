export component MainWindow {
    callback run_script(script_name: string);
    callback toggle_service(service_name: string, enabled: bool);

    in property<string> output_text;
    in property<string> tab: string; // "Optimizations" or "Services"

    VerticalLayout {
        spacing: 10px;

        HorizontalLayout {
            spacing: 10px;
            Button {
                text: "🛠 Optimizations";
                clicked => { root.tab = "Optimizations"; }
            }
            Button {
                text: "🔧 Services";
                clicked => { root.tab = "Services"; }
            }
        }

        Rectangle {
            height: 2px;
            color: #ccc;
        }

        if tab == "Optimizations" : OptimizationsPanel { run_script => root.run_script; }
        if tab == "Services" : ServicesPanel { toggle_service => root.toggle_service; }

        Text {
            text: root.output_text;
            wrap: word;
            font-size: 14px;
            color: root.output_text.contains("❌") ? red : green;
            height: 100px;
        }
    }
}

component OptimizationsPanel inherits VerticalLayout {
    callback run_script(script_name: string);

    VerticalLayout {
        spacing: 8px;

        // You can reuse this pattern for each script button
        for script in [
            ["⚡ Better Power Management", "PowerPlan"],
            ["🗑 Clean Junk Files", "CleanUp"],
            ["💿 Drive Optimization", "DriveOpt"],
            ["🌐 Disable IPv6", "IPv6 Disable"]
            // ...add the rest
        ] : Button {
            text: script[0];
            clicked => { root.run_script(script[1]); }
        }
    }
}

component ServicesPanel inherits VerticalLayout {
    callback toggle_service(service_name: string, enabled: bool);

    VerticalLayout {
        spacing: 8px;

        // Placeholder; dynamically populated from Rust
        for service in [
            ["Windows Update", true],
            ["Print Spooler", false]
        ] : HorizontalLayout {
            Text { text: service[0]; }
            Switch {
                checked: service[1];
                toggled => { root.toggle_service(service[0], self.checked); }
            }
        }
    }
}
